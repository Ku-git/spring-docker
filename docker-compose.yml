version: "3.8"

services:
  db:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_USER: root
#      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ms
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
#    networks:
#      backend:
#        aliases:
#          - "database"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 30s
    volumes:
      - ./src/main/resources/init.sql:/docker-entrypoint-initdb.d/1-init.sql
    networks:
      - demo-network
  config-server:
    image: config-server:latest
    ports:
      - "8071:8071"
#    networks:
#      backend:
#        aliases:
#          - "config-server"
    networks:
      - demo-network
  eureka-server:
    image: eureka-server:latest
    ports:
      - "8070:8070"
    depends_on:
      db:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - demo-network
  gateway-server:
    image: gateway-server:latest
    ports:
      - "8072:8072"
    depends_on:
      db:
        condition: service_healthy
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started
    networks:
      - demo-network
  spring-app:
    image: spring-app:latest
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      PROFILE: "dev"
      CONFIG_SERVER_URI: "http://config-server"
      CONFIG_SERVER_PORT: "8071"
#    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/ms # 確保環境變數與配置一致
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD:
#    networks:
#      backend:
#        aliases:
#          - "spring-app"
    networks:
      - demo-network
  organization-server:
    image: organization-server:latest
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      PROFILE: "dev"
      CONFIG_SERVER_URI: "http://config-server"
      CONFIG_SERVER_PORT: "8071"
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/ms # 確保環境變數與配置一致
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD:
    networks:
      - demo-network
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_FRONTEND_URL: keycloak
    volumes:
      - ./src/main/resources/realm.json:/opt/keycloak/data/import/realm.json
    command:
      - "start-dev"
      - "--import-realm"
      - "--optimized"
    ports:
      - "8180:8080"
    networks:
      - demo-network
  kafka:
    image: apache/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://kafka:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - demo-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8010:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - demo-network
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - demo-network

networks:
  demo-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET:-172.16.0.0/24}
#networks:
#  backend:
#    driver: bridge